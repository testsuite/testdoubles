(dp0
S'tests'
p1
(dp2
S'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0012: should have the same docstring as the live callable'
p3
I89
sS'tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0005: should return false if the first method has specified a varargs argument and the second method has no arguments'
p4
I113
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0010: should not have a reference to the fake unbound version of the method if the method is unbound'
p5
I101
sS'tests.unit.utils.test_are_argspecs_identical.A argspecs comparison method.test 0000: should return true if the argspecs are completely identical'
p6
I105
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0011: should raise an attribute error when accessing __func__ and the method is not a bound or unbound instance method'
p7
I88
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0000: should have the same name as the live object'
p8
I91
sS"tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0003: should return false if the first method doesn't have the same amount of arguments as the second"
p9
I111
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0005: should raise an attribute error when attempting to use the im_class internal attribute'
p10
I22
sS"tests.functional.fakes.test_fake_callable.A Fake Function object.test 0010: should have an attribute named im_class that is equal to the __self__ attribute's type"
p11
I27
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0010: should return false if the first method has no keyword arguments and the second method has a kwargs argument'
p12
I46
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0008: should return false if the first method has no positional arguments and the second method has a varargs argument'
p13
I44
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0000: should have the same name as the live object'
p14
I17
sS'tests.unit.fakes.test_fake.A Fake Object.test 0000: should raise a TypeError when the configuration does not exist'
p15
I50
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0006: should raise an attribute error when attempting to use the func_code internal attribute'
p16
I83
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0013: should return false if the second method has a more positional arguments than the first method'
p17
I49
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime1.test 0000: should return true if the live function is an instance method'
p18
I55
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0003: should raise an attribute error when accessing __self__ and the method is not a bound or unbound instance method'
p19
I94
sS'tests.unit.utils.test_are_argspecs_identical.A argspecs comparison method.test 0002: should return false if the argspecs are completely different'
p20
I107
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0016: should raise an attribute error when accessing __func__ and the method is not a bound or unbound instance method'
p21
I33
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0008: should raise an attribute error when attempting to use the func_name internal attribute'
p22
I25
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0011: should raise an attribute error when accessing __func__ and the method is not a bound or unbound instance method'
p23
I102
sS'tests.functional.fakes.test_fake.A Fake Object.test 0002: should raise NotImplementedError when invoking any method that is missing in the fake implementation'
p24
I3
sS"tests.unit.fakes.test_fake_callable.A Fake Function's live property.test 0000: should have a read only property named live"
p25
I68
sS'tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0001: should return true if the first method has specified a varargs argument and the second method has an argument '
p26
I109
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime.test 0001: should return false if the live function is a bound instance method'
p27
I64
sS"tests.unit.fakes.test_fake_callable.A Fake Function's initialization method.test 0000: should raise a value error when inspecting arguments of a builtin callable"
p28
I70
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0004: should return false if the first method has specified a kwargs argument and the second method has no arguments'
p29
I119
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0008: should raise an attribute error when attempting to use the func_name internal attribute'
p30
I85
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0015: should not have a reference to the fake unbound version of the method if the method is unbound'
p31
I32
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0005: should return false if the first method has no arguments and the second method has specified a kwargs argument'
p32
I120
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0002: should return true if the argspecs are not completely identical but the first method has a varargs argument'
p33
I38
sS'tests.functional.fakes.test_fake.A Fake Object.test 0000: should substitute the real object with the fake object'
p34
I1
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0006: should have an attribute named func_doc that is equal to the __doc__ attribute'
p35
I97
sS'tests.unit.fakes.test_fake.A Fake Object.test 0001: should raise a TestDoubleConfigurationError when the configuration does not contain the type to be faked'
p36
I51
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0003: should return false if both methods have different keyword arguments and no kwargs argument'
p37
I118
sS"tests.functional.fakes.test_fake_callable.A Fake Function's initialization method.test 0002: should not raise a ValueError when arguments inspection is opted out."
p38
I16
sS"tests.unit.fakes.test_fake_callable.A Fake Function's fake property.test 0001: should be equal to the bound __call__ of the fake callable"
p39
I75
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime1.test 0000: should return true if the live function is an instance method'
p40
I52
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is unbound instance method property.test 0000: should return false if the live function is an instance method"
p41
I8
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is unbound instance method property.test 0001: should return true if the live function is an unbound instance method"
p42
I9
sS'tests.unit.fakes.test_fake_callable.A Fake Function object.test 0000: should be callable'
p43
I76
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0002: should have a reference to the instance if the method is bound'
p44
I79
sS'tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0000: should return true if the first method has an argument and the second method has specified a varargs argument'
p45
I108
sS"tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0004: should return false if the second method doesn't have the same amount of arguments as the first"
p46
I112
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0013: should have the same code object as the fake callable'
p47
I104
sS"tests.unit.fakes.test_fake_callable.A Fake Function's initialization method.test 0001: should raise a value error when the provided live object does not match the argspec"
p48
I71
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime.test 0002: should return false if the live function is not an instance method'
p49
I65
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0000: should have the same name as the live object'
p50
I77
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime.test 0002: should return false if the live function is not an instance method'
p51
I60
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0005: should have an attribute named func_code that is equal to the __code__ attribute'
p52
I96
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0001: should have the same name as the live object when the live object is a callable class instance'
p53
I18
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime.test 0000: should return true if the live function is an unbound instance method'
p54
I63
sS'tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0002: should return true if both methods have the same amount of arguments'
p55
I110
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime1.test 0001: should return true if the live function is an unbound instance method'
p56
I53
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0003: should return true if the argspecs are not completely identical but the second method has a varargs argument'
p57
I39
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0012: should return false if the first method has a more positional arguments than the second method'
p58
I48
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0010: should not have a reference to the fake unbound version of the method if the method is unbound'
p59
I87
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0001: should return true if the first method has specified a kwargs argument and the second method has a keyword argument'
p60
I116
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0013: should have the same code object as the fake callable'
p61
I90
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0012: should have an attribute named func_doc that is equal to the __doc__ attribute'
p62
I29
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is instance method property.test 0002: should return false if the live function is not an instance method"
p63
I13
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0004: should raise an attribute error when attempting to use the im_self alias'
p64
I21
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0005: should raise an attribute error when attempting to use the im_class internal attribute'
p65
I82
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0009: should have a reference to the fake unbound version of the method if the method is bound'
p66
I86
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0000: should return true if the argspecs are completely identical'
p67
I36
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0017: should have the same docstring as the live callable'
p68
I34
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is unbound instance method property.test 0002: should return false if the live function is not an instance method"
p69
I10
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0006: should return true if the first method has keyword arguments and the second method has a kwargs argument '
p70
I42
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0002: should have a reference to the instance if the method is bound'
p71
I93
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0005: should return true if the first method has a kwargs argument and the second method has keyword arguments'
p72
I41
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime.test 0003: should detect unbound instance methods by inspecting the arguments'
p73
I61
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0001: should have the same name as the live object when the live object is a callable class instance'
p74
I92
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime1.test 0001: should return true if the live function is an unbound instance method'
p75
I56
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0009: should have a reference to the fake unbound version of the method if the method is bound'
p76
I100
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime1.test 0002: should return false if the live function is not an instance method'
p77
I54
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0009: should have an attribute named im_self that is equal to the __self__ attribute'
p78
I26
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0001: should have the same name as the live object when the live object is a callable class instance'
p79
I78
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0007: should raise an attribute error when attempting to use the func_doc internal attribute'
p80
I84
sS'tests.unit.utils.test_are_arguments_identical.A arguments comparison method.test 0006: should return false if the first method has no arguments and the second method has specified a varargs argument'
p81
I114
sS'tests.functional.fakes.test_fake.A Fake Object.test 0004: should replace the original properties with the fake properties'
p82
I5
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0011: should return false if both methods have different keyword arguments'
p83
I47
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime.test 0001: should return false if the live function is a bound an instance method'
p84
I59
sS"tests.functional.fakes.test_fake_callable.A Fake Function's initialization method.test 0000: should raise a TypeError when the provided live object is not callable"
p85
I14
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0014: should have a reference to the fake unbound version of the method if the method is bound'
p86
I31
sS'tests.unit.utils.test_are_argspecs_identical.A argspecs comparison method.test 0001: should return true if the argspecs are almost identical'
p87
I106
sS'tests.functional.fakes.test_fake.A Fake Object.test 0006: should raise NotImplementedError when getting or setting any property that is missing in the fake implementation'
p88
I7
sS'tests.functional.fakes.test_fake.A Fake Object.test 0003: should replace the original methods with the fake methods'
p89
I4
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0011: should have an attribute named func_code that is equal to the __code__ attribute'
p90
I28
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0008: should have an attribute named func_name that is equal to the __name__ attribute'
p91
I99
sS"tests.unit.fakes.test_fake_callable.A Fake Function's initialization method.test 0002: should not raise a value error when the provided live object matches the argspec"
p92
I72
sS'tests.functional.fakes.test_fake.A Fake Object.test 0005: should contain all properties that are missing in the fake implementation'
p93
I6
sS"tests.functional.fakes.test_fake_callable.A Fake Function's initialization method.test 0001: should raise a ValueError when the provided live object does not match the argspec"
p94
I15
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0003: should raise an attribute error when accessing __self__ and the method is not a bound or unbound instance method'
p95
I20
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0007: should return false if the first method has a varargs argument and the second method has no positional arguments'
p96
I43
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime.test 0004: should not detect unbound instance methods by inspecting their self attribute'
p97
I62
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0018: should have the same code object as the fake callable'
p98
I35
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0002: should have a reference to the instance if the method is bound'
p99
I19
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0007: should raise an attribute error when attempting to use the func_doc internal attribute'
p100
I24
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is instance method property.test 0000: should return true if the live function is an instance method"
p101
I11
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0003: should raise an attribute error when accessing __self__ and the method is not a bound or unbound instance method'
p102
I80
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0012: should have the same docstring as the live callable'
p103
I103
sS"tests.unit.fakes.test_fake_callable.A Fake Function's initialization method.test 0003: should not inspect the argspec of the live object when argument inspection is opted out"
p104
I73
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0006: should raise an attribute error when attempting to use the func_code internal attribute'
p105
I23
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0004: should return true if both methods have exactly the same keyword arguments'
p106
I40
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime1.test 0002: should return false if the live function is not an instance method'
p107
I57
sS"tests.unit.fakes.test_fake_callable.A Fake Function's live property.test 0001: should be equal to the provided function"
p108
I69
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0000: should return true if the first method has a keyword argument and the second method has specified a kwargs argument'
p109
I115
sS'tests.functional.fakes.test_fake.A Fake Object.test 0001: should contain all methods that are missing in the fake implementation'
p110
I2
sS'tests.unit.utils.test_are_keyword_arguments_identical.A keyword arguments comparison method.test 0002: should return true if both methods have exactly the same keyword arguments'
p111
I117
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime2.test 0004: should raise an attribute error when attempting to use the im_self alias'
p112
I81
sS"tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0007: should have an attribute named im_class that is equal to the __self__ attribute's type"
p113
I98
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime2.test 0004: should have an attribute named im_self that is equal to the __self__ attribute'
p114
I95
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime.test 0004: should detect unbound instance methods by inspecting their self attribute'
p115
I67
sS"tests.unit.fakes.test_fake_callable.A Fake Function's fake property.test 0000: should have a read only property named fake"
p116
I74
sS'tests.functional.fakes.test_fake_callable.A Fake Function object.test 0013: should have an attribute named func_name that is equal to the __name__ attribute'
p117
I30
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0009: should return false if the first method has a kwargs argument and the second method has no keyword arguments'
p118
I45
sS'tests.functional.utils.test_are_argspecs_identical.A keyword arguments comparison method.test 0001: should return true if the argspecs are not completely identical but have the same number of positional arguments'
p119
I37
sS'tests.unit.fakes.test_fake_callable.having a python 2.x runtime.test 0003: should not detect unbound instance methods by inspecting the arguments'
p120
I66
sS'tests.unit.fakes.test_fake_callable.having a python 3.x runtime.test 0000: should return true if the live function is an unbound instance method'
p121
I58
sS"tests.functional.fakes.test_fake_callable.A Fake Function's is instance method property.test 0001: should return true if the live function is an unbound instance method"
p122
I12
ssS'ids'
p123
(dp124
I1
g34
sI2
g110
sI3
g24
sI4
g89
sI5
g82
sI6
g93
sI7
g88
sI8
g41
sI9
g42
sI10
g69
sI11
g101
sI12
g122
sI13
g63
sI14
g85
sI15
g94
sI16
g38
sI17
g14
sI18
g53
sI19
g99
sI20
g95
sI21
g64
sI22
g10
sI23
g105
sI24
g100
sI25
g22
sI26
g78
sI27
g11
sI28
g90
sI29
g62
sI30
g117
sI31
g86
sI32
g31
sI33
g21
sI34
g68
sI35
g98
sI36
g67
sI37
g119
sI38
g33
sI39
g57
sI40
g106
sI41
g72
sI42
g70
sI43
g96
sI44
g13
sI45
g118
sI46
g12
sI47
g83
sI48
g58
sI49
g17
sI50
g15
sI51
g36
sI52
g40
sI53
g56
sI54
g77
sI55
g18
sI56
g75
sI57
g107
sI58
g121
sI59
g84
sI60
g51
sI61
g73
sI62
g97
sI63
g54
sI64
g27
sI65
g49
sI66
g120
sI67
g115
sI68
g25
sI69
g108
sI70
g28
sI71
g48
sI72
g92
sI73
g104
sI74
g116
sI75
g39
sI76
g43
sI77
g50
sI78
g79
sI79
g44
sI80
g102
sI81
g112
sI82
g65
sI83
g16
sI84
g80
sI85
g30
sI86
g66
sI87
g59
sI88
g7
sI89
g3
sI90
g61
sI91
g8
sI92
g74
sI93
g71
sI94
g19
sI95
g114
sI96
g52
sI97
g35
sI98
g113
sI99
g91
sI100
g76
sI101
g5
sI102
g23
sI103
g103
sI104
g47
sI105
g6
sI106
g87
sI107
g20
sI108
g45
sI109
g26
sI110
g55
sI111
g9
sI112
g46
sI113
g4
sI114
g81
sI115
g109
sI116
g60
sI117
g111
sI118
g37
sI119
g29
sI120
g32
ss.